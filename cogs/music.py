from asyncio import sleep

import discord
from discord.ext import commands
import yt_dlp as youtube_dl
import asyncio
import time
from .search import SearchModal
# –í–∞—à–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ytdl –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
ytdl_format_options = {
    'format': 'bestaudio/best',
    'extractaudio': True,  # –¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ
    'audioformat': 'mp3',
    'outtmpl': '-',
    'restrictfilenames': True,
    'noplaylist': True,
    'nocheckcertificate': True,
    'ignoreerrors': True,
    'logtostderr': False,
    'quiet': True,
    'no_warnings': True,
    'default_search': 'auto',
    'source_address': '0.0.0.0',
    'extract_flat': True,
    'geo_bypass': True,
    'socket_timeout': 15,
    'retries': 10,
    'force-ipv4': True,
    'prefer_insecure': True,
    'cachedir': False,
    'age_limit': 21,
    'extractor_args': {
        'youtube': {
            'player_client': ['android'],
            'player_skip': ['webpage'],
            'skip': ['dash', 'hls']
        }
    }
}


class MusicControlView(discord.ui.View):
    def __init__(self, music_cog, ctx):
        super().__init__(timeout=None)
        self.music_cog = music_cog
        self.ctx = ctx
        self.message = None
        self.current_track = None
        self.track_duration = 0
        self.start_time = None
        self.pause_time = 0
        self.last_pause_start = None
        self.update_task = None

    @discord.ui.button(label="üîç –ü–æ–∏—Å–∫", style=discord.ButtonStyle.secondary, row=1)
    async def search_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∏—Å–∫–∞ –∏–∑ search.py"""
        modal = SearchModal(self.music_cog)
        await interaction.response.send_modal(modal)

    def create_progress_bar(self, current_seconds, total_seconds, length=20):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        if total_seconds <= 0:
            return "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0:00 / 0:00"

        progress = min(current_seconds / total_seconds, 1.0)
        filled_length = int(length * progress)

        bar = "‚ñà" * filled_length + "‚ñë" * (length - filled_length)

        current_time = self.format_time(int(current_seconds))
        total_time = self.format_time(int(total_seconds))

        return f"{bar} {current_time} / {total_time}"

    def format_time(self, seconds):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ MM:SS –∏–ª–∏ HH:MM:SS"""
        if seconds < 3600:
            return f"{seconds // 60}:{seconds % 60:02d}"
        else:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            seconds = seconds % 60
            return f"{hours}:{minutes:02d}:{seconds:02d}"

    def get_current_position(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        if not self.start_time:
            return 0

        current_time = time.time()
        elapsed = current_time - self.start_time - self.pause_time

        if self.last_pause_start:
            elapsed -= (current_time - self.last_pause_start)

        return max(0, elapsed)

    async def start_progress_updates(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if self.update_task:
            self.update_task.cancel()

        self.update_task = asyncio.create_task(self._update_progress_loop())

    async def _update_progress_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥"""
        try:
            while True:
                if (self.ctx.voice_client and
                        self.ctx.voice_client.is_playing() and
                        self.track_duration > 0):
                    await self.update_embed()
                await asyncio.sleep(1)
        except asyncio.CancelledError:
            pass

    def stop_progress_updates(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if self.update_task:
            self.update_task.cancel()
            self.update_task = None

    async def update_embed(self, track_info=None, duration=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
        if not self.message:
            return

        queue = self.music_cog.get_queue(self.ctx.guild.id)

        if track_info:
            self.current_track = track_info
            self.track_duration = duration or 0
            self.start_time = time.time()
            self.pause_time = 0
            self.last_pause_start = None
            await self.start_progress_updates()

        embed = discord.Embed(
            title="üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–ª–µ–µ—Ä",
            color=discord.Color.blue()
        )

        if self.current_track:
            embed.add_field(
                name="üé∂ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç",
                value=f"**{self.current_track}**",
                inline=False
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            if self.track_duration > 0:
                current_pos = self.get_current_position()
                progress_bar = self.create_progress_bar(current_pos, self.track_duration)
                embed.add_field(
                    name="‚è±Ô∏è –ü—Ä–æ–≥—Ä–µ—Å—Å",
                    value=f"```{progress_bar}```",
                    inline=False
                )
        else:
            embed.add_field(
                name="üé∂ –°—Ç–∞—Ç—É—Å",
                value="–ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç",
                inline=False
            )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏
        if queue:
            next_track = queue[0] if queue else "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞"
            embed.add_field(
                name="‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫",
                value=f"`{next_track}`",
                inline=False
            )
            embed.add_field(
                name="üìã –í –æ—á–µ—Ä–µ–¥–∏",
                value=f"{len(queue)} —Ç—Ä–µ–∫–æ–≤",
                inline=True
            )
        else:
            embed.add_field(
                name="üìã –û—á–µ—Ä–µ–¥—å",
                value="–ü—É—Å—Ç–∞",
                inline=True
            )

        # –°—Ç–∞—Ç—É—Å –ø–ª–µ–µ—Ä–∞
        if self.ctx.voice_client:
            if self.ctx.voice_client.is_playing():
                status = "‚ñ∂Ô∏è –ò–≥—Ä–∞–µ—Ç"
            elif self.ctx.voice_client.is_paused():
                status = "‚è∏Ô∏è –ù–∞ –ø–∞—É–∑–µ"
            else:
                status = "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        else:
            status = "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"

        embed.add_field(name="üîä –°—Ç–∞—Ç—É—Å", value=status, inline=True)

        try:
            await self.message.edit(embed=embed, view=self)
        except discord.NotFound:
            self.message = None
            self.stop_progress_updates()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è embed: {e}")

    @discord.ui.button(label='‚è∏Ô∏è –ü–∞—É–∑–∞/–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', style=discord.ButtonStyle.primary)
    async def pause_resume(self, interaction: discord.Interaction, button: discord.ui.Button):
        current_time = time.time()

        if self.ctx.voice_client and self.ctx.voice_client.is_playing():
            self.ctx.voice_client.pause()
            self.last_pause_start = current_time
            await interaction.response.send_message("‚è∏Ô∏è –ú—É–∑—ã–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", ephemeral=True)
        elif self.ctx.voice_client and self.ctx.voice_client.is_paused():
            if self.last_pause_start:
                self.pause_time += current_time - self.last_pause_start
                self.last_pause_start = None
            self.ctx.voice_client.resume()
            await interaction.response.send_message("‚ñ∂Ô∏è –ú—É–∑—ã–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç", ephemeral=True)

        await self.update_embed()

    @discord.ui.button(label='‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', style=discord.ButtonStyle.secondary)
    async def skip_track(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.ctx.voice_client and self.ctx.voice_client.is_playing():
            self.ctx.voice_client.stop()
            await interaction.response.send_message("‚è≠Ô∏è –¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç", ephemeral=True)

    @discord.ui.button(label='üìã –û—á–µ—Ä–µ–¥—å', style=discord.ButtonStyle.secondary)
    async def show_queue(self, interaction: discord.Interaction, button: discord.ui.Button):
        queue = self.music_cog.get_queue(self.ctx.guild.id)
        if queue:
            message = "**üìã –û—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤:**\n" + "\n".join(
                f"{i + 1}. {url}" for i, url in enumerate(queue[:10]))
            if len(queue) > 10:
                message += f"\n... –∏ –µ—â–µ {len(queue) - 10} —Ç—Ä–µ–∫–æ–≤"
            await interaction.response.send_message(message, ephemeral=True)
        else:
            await interaction.response.send_message("üìã –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞", ephemeral=True)

    @discord.ui.button(label='üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å', style=discord.ButtonStyle.secondary)
    async def volume_control(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = VolumeModal(self.ctx)
        await interaction.response.send_modal(modal)

    @discord.ui.button(label='‚èπÔ∏è –°—Ç–æ–ø', style=discord.ButtonStyle.danger)
    async def stop_music(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.ctx.voice_client:
            self.stop_progress_updates()
            await self.ctx.voice_client.disconnect()
            if self.ctx.guild.id in self.music_cog.queues:
                self.music_cog.queues[self.ctx.guild.id].clear()
            if self.message:
                await self.message.delete()
                self.message = None
            await interaction.response.defer()  # —Å–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            message = await interaction.followup.send("‚èπÔ∏è –ú—É–∑—ã–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
            await asyncio.sleep(10)
            await message.delete()

        else:
            await interaction.response.send_message("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É")

class VolumeModal(discord.ui.Modal):
    def __init__(self, ctx):
        super().__init__(title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏")
        self.ctx = ctx

    volume_input = discord.ui.TextInput(
        label="–ì—Ä–æ–º–∫–æ—Å—Ç—å (0-100)",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 100",
        min_length=1,
        max_length=3
    )

    async def on_submit(self, interaction: discord.Interaction):
        try:
            volume = int(self.volume_input.value)
            if 0 <= volume <= 100:
                if self.ctx.voice_client and hasattr(self.ctx.voice_client.source, 'volume'):
                    self.ctx.voice_client.source.volume = volume / 100
                    await interaction.response.send_message(f"üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {volume}%", ephemeral=True)
                else:
                    await interaction.response.send_message("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å", ephemeral=True)
            else:
                await interaction.response.send_message("‚ùå –ì—Ä–æ–º–∫–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100", ephemeral=True)
        except ValueError:
            await interaction.response.send_message("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", ephemeral=True)


class Music(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.queues = {}
        self.current_views = {}

    def get_queue(self, guild_id):
        if guild_id not in self.queues:
            self.queues[guild_id] = []
        return self.queues[guild_id]

    async def _play_next(self, ctx):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        queue = self.get_queue(ctx.guild.id)

        if queue:
            next_url = queue.pop(0)
            await self._play(ctx, next_url, from_queue=True)
        else:
            if ctx.guild.id in self.current_views:
                view = self.current_views[ctx.guild.id]
                view.stop_progress_updates()
                await view.update_embed()

    async def _play(self, ctx, url, from_queue=False):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            ytdl = youtube_dl.YoutubeDL(ytdl_format_options)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ (–≤–∫–ª—é—á–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
            ytdl_info_options = ytdl_format_options.copy()
            ytdl_info_options['extract_flat'] = False

            ytdl_info = youtube_dl.YoutubeDL(ytdl_info_options)
            info = await self.bot.loop.run_in_executor(
                None, lambda: ytdl_info.extract_info(url, download=False)
            )

            if 'entries' in info:
                info = info['entries'][0]

            title = info.get('title', url)
            audio_url = info['url']
            duration = info.get('duration', 0)

            source = discord.FFmpegPCMAudio(
                audio_url,
                before_options='-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5'
            )

            def after_playing(error):
                if error:
                    print(f'–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {error}')
                else:
                    if ctx.guild.id in self.current_views:
                        view = self.current_views[ctx.guild.id]
                        view.stop_progress_updates()
                    asyncio.run_coroutine_threadsafe(self._play_next(ctx), self.bot.loop)

            ctx.voice_client.play(source, after=after_playing)

            if ctx.guild.id in self.current_views:
                view = self.current_views[ctx.guild.id]
                await view.update_embed(title, duration)

            if not from_queue:
                duration_str = self.format_time(duration) if duration > 0 else "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
                message = await ctx.send(f"üéµ –ù–∞—á–∏–Ω–∞—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: **{title}** ({duration_str})")
                await asyncio.sleep(10)
                await message.delete()
        except Exception as e:
            message = await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
            await asyncio.sleep(10)
            await message.delete()

    def format_time(self, seconds):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ MM:SS –∏–ª–∏ HH:MM:SS"""
        if seconds < 3600:
            return f"{seconds // 60}:{seconds % 60:02d}"
        else:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            seconds = seconds % 60
            return f"{hours}:{minutes:02d}:{seconds:02d}"

    @commands.command()
    async def play(self, ctx, *, url):
        await ctx.message.delete()

        if not ctx.voice_client:
            if ctx.author.voice:
                await ctx.author.voice.channel.connect()
            else:
                return await ctx.send("‚ùå –í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!")

        # –ï—Å–ª–∏ —É–∂–µ —á—Ç–æ-—Ç–æ –∏–≥—Ä–∞–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        if ctx.voice_client.is_playing():
            queue = self.get_queue(ctx.guild.id)
            queue.append(url)
            await ctx.send(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: `{url}`", delete_after=5)

            # –û–±–Ω–æ–≤–ª—è–µ–º embed, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            view = self.current_views.get(ctx.guild.id)
            if view and view.message:
                await view.update_embed()
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ view –∏–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
        if ctx.guild.id not in self.current_views or not self.current_views[ctx.guild.id].message:
            view = MusicControlView(self, ctx)
            self.current_views[ctx.guild.id] = view

            embed = discord.Embed(
                title="üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–ª–µ–µ—Ä",
                description="–ó–∞–≥—Ä—É–∑–∫–∞...",
                color=discord.Color.blue()
            )

            view.message = await ctx.send(embed=embed, view=view)

        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        await self._play(ctx, url)
    # –í–∞—à–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    @commands.command()
    async def skip(self, ctx):
        """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫"""
        if ctx.voice_client and ctx.voice_client.is_playing():
            ctx.voice_client.stop()
            await ctx.send("–¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω")
        else:
            await ctx.send("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç")

    @commands.command()
    async def queue(self, ctx):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å"""
        queue = self.get_queue(ctx.guild.id)
        if queue:
            message = "**–û—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤:**\n" + "\n".join(
                f"{i + 1}. {url}" for i, url in enumerate(queue))
            await ctx.send(message)
        else:
            await ctx.send("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")

    @commands.command()
    async def volume(self, ctx, volume: int):
        """–ò–∑–º–µ–Ω—è–µ—Ç –≥—Ä–æ–º–∫–æ—Å—Ç—å –ø–ª–µ–µ—Ä–∞ (0-100)"""
        if ctx.voice_client is None:
            return await ctx.send("–Ø –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.")

        if 0 <= volume <= 100:
            if hasattr(ctx.voice_client.source, 'volume'):
                ctx.voice_client.source.volume = volume / 100
                await ctx.send(f"–ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {volume}%")
            else:
                await ctx.send("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
        else:
            await ctx.send("–ì—Ä–æ–º–∫–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100")


async def setup(bot):
    await bot.add_cog(Music(bot))